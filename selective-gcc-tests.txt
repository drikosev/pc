
 2019-02-28

				Selective Tests 
				  (GCC 4.8.5)
                                ---------------


 This document lists a few cases that one shall pay attention when minimal testing 
 of the compiler is desired. To avoid running the C/C++ & Fortran tests during the
 build, which is the default testing procedure, type the following command: 
 
 ./port install gcc4 gcc4-test="" gcc4-test-options=""


 The basic difference between the package gcc4 and gcc48 is that the latter builds  
 a bootstrapped compiler, a process some times broken on Darwin. Back to our topic,
 one shall pay attention to:


 1. Recurring Issues
    These tests fail steadily on a specific system/version only. I've not identified
    ie C/C++ test cases that fail in both MacOS & Linux.

 2. Solved Issues
    These tests had failed at least one time, they are now solved but errors have
    the tendency to reappear from time to time, ie random failures that were not
    actually solved by the applied patch. This list attempts to catch such errors.

 3. Recent PRs in GNU GCC Bugzilla
    Some reported issues affect this version as well, which is no longer supported by
    FSF but it's still maintained by Red Hat and Oracle. The list here is indicative,
    not complete. In contrast, several stale Fortran issues which have been resolved 
    in newer GNU Fortran versions are listed in the package documentation.

 4. Post Install Tests
    These tests should better run manually once a package is built. They are not
    part of the installation procedure because the installation script might exit
    abnormally without creating the package if any test fail.

 -------------------------------------------------------------------------------------------


 1.  Recurring Issues
 --------------------

     #fail: always on MacOS (Suspended PR/48097)
     ./port test gcc48 gcc48-test-options=check-target-libjava  RUNTESTFLAGS="lang.exp=Throw_2*"
     ./port test gcc4   gcc4-test-options=check-target-libjava  RUNTESTFLAGS="lang.exp=Throw_2*"

     #fail: on MacOS (The PlugIn isn't loaded if gcc4/gcc48 hasn't been installed)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="i386.exp=pr49866.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="i386.exp=pr49866.c"

     #fail: on MacOS (PR/84530; Does the PlugIn really call __ret_thunk?)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="i386.exp=ret-thunk-26.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="i386.exp=ret-thunk-26.c"

     #fail: on Linux
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr43051-1.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr43051-1.c"

     #fail: on Linux
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54200.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54200.c"

     #fail: on Linux
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54519-1.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54519-1.c"

     #fail: on Linux
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54693-2.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="guality.exp=pr54693-2.c"

     #fail: gcc48 on Linux (passes with gcc4)
     ./port test gcc48 gcc48-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="abi.exp=abi_check"
     ./port test gcc4   gcc4-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="abi.exp=abi_check"

     #fail: gcc48 on Linux (passes with gcc4)
     ./port test gcc48 gcc48-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=explicit-hle.cc"
     ./port test gcc4   gcc4-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=explicit-hle.cc"

     #fail: gcc48 on Linux (passes with gcc4)
     ./port test gcc48 gcc48-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=whatis.cc"
     ./port test gcc4   gcc4-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=whatis.cc"

     #fail: on Linux
     ./port test gcc48 gcc48-test-options=check-target-libmudflap RUNTESTFLAGS="c++frags.exp=pass41-frag.cxx"
     ./port test gcc4   gcc4-test-options=check-target-libmudflap RUNTESTFLAGS="c++frags.exp=pass41-frag.cxx"

     #fail: on Linux  (buggy backport, never fails on macOS)
     ./port test gcc48 gcc48-test-options=check-gcc-fortran RUNTESTFLAGS="dg.exp=unlimited_polymorphic_26.f90"
     ./port test gcc4   gcc4-test-options=check-gcc-fortran RUNTESTFLAGS="dg.exp=unlimited_polymorphic_26.f90"



 2. Solved Issues
 --------------

     #fail: on MacOS 10.13 with the CLT's for Xcode 9.3 (I delete the file include-fixed/stdio.h)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="cpp.exp=isysroot-1.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="cpp.exp=isysroot-1.c"

     #fail: on MacOS 10.13 with the CLT's for Xcode 9.3 (not finialised PR/83531 )
     ./port test gcc48 gcc48-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=darwin-cfstring1.C"
     ./port test gcc4   gcc4-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=darwin-cfstring1.C"

     #fail: on MacOS 10.12 & 10.13 (backport PR/69960 +hacked C/C++ parsers)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="dg.exp=framework-1.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="dg.exp=framework-1.c"

     #fail: on MacOS 10.12 & 10.13 (added test to 10.12 & 10.13)
     ./port test gcc48 gcc48-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=framework-1.C"
     ./port test gcc4   gcc4-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=framework-1.C"

     #fail: on MacOS (ie 10.12 & 10.13)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="tree-prof.exp=pr52027.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="tree-prof.exp=pr52027.c"

     #fail: on MacOS (adjusted as in GCC 7.1)
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="trad.exp=include.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="trad.exp=include.c"

     #fail: on MacOS (ie 10.13)
     ./port test gcc48 gcc48-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=pr59255.C"
     ./port test gcc4   gcc4-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=pr59255.C"

     #fail: on OS X Mavericks 10.9 (without the PR/78968)
     ./port test gcc48 gcc48-test-options=check-gcc-c++ RUNTESTFLAGS="tls.exp=thread_local-order*"
     ./port test gcc4   gcc4-test-options=check-gcc-c++ RUNTESTFLAGS="tls.exp=thread_local-order*"

     #fail: on MacOS (with a Linux specific patch) 
     ./port test gcc48 gcc48-test-options=check-target-libgomp RUNTESTFLAGS="c.exp=lock*"
     ./port test gcc4   gcc4-test-options=check-target-libgomp RUNTESTFLAGS="c.exp=lock*"

     #fail: (it couldn't properly load the ASAN library due to a separate object file)
     ./port test gcc48 gcc48-test-options=check-gcc-fortran RUNTESTFLAGS="dg.exp=elemental_allocate_1.f90"
     ./port test gcc4   gcc4-test-options=check-gcc-fortran RUNTESTFLAGS="dg.exp=elemental_allocate_1.f90"

     #fail: on Mavericks 10.9 (We wanted a small change to avoid PR/...)
     ./port test gcc4   gcc4-test-options=check-gcc-c++ RUNTESTFLAGS="dg.exp=key2.C"

     #fail: gcc48 on Yosemite 10.10 (passes with gcc4; random failures not reproduced in Terminal/Xcode)
     #[ if it fail, try sed  -i.sav "s,10000, 9700,g" gcc/gcc-4.8.5/gcc/testsuite/gcc.dg/pch/pch.exp ]
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="pch.exp=largefile.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="pch.exp=largefile.c"

     #fail: on OS X Mavericks 10.9 ( a modification to PR/71767 solved this problem on 10.9 ) 
     # Test manually the example in PR/87199.  There isn't any patch file yet.

     #fail: gcc48 on 10.12 (a rebuild fixed the error: unrecognized option -B/usr/local/x86_64-apple-darwin16/bin)
     ./port test gcc48 gcc48-test-options=check-target-libitm
     ./port test gcc4   gcc4-test-options=check-target-libitm

     #fail: gcc48 on Linux (was passing with gcc4; added "-latomic")
     ./port test gcc48 gcc48-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=user_pod.cc"
     ./port test gcc4   gcc4-test-options=check-target-libstdc++-v3 RUNTESTFLAGS="conformance.exp=user_pod.cc"

     #fail: on Linux  (an unlimited polymorphic entity was not carrying a string length with it)
     # Test manually the example in PR/61261.  There isn't any patch file for the test case.

     #fail: on MacOS 10.13 ( Configuration of gcc4 with LTO )
     ./port test gcc48 gcc48-test-options=check-gcc-c RUNTESTFLAGS="asan.exp=strncpy-overflow-1.c"
     ./port test gcc4   gcc4-test-options=check-gcc-c RUNTESTFLAGS="asan.exp=strncpy-overflow-1.c"


 3. Recent PRs in GNU GCC Bugzilla

    -The PR/84497 is still open. 
    -The PR/52268 seems to be an enhancement request.
    -(...)


 4. Post Install Tests
 ----------------------

    4.1 Post Install Tests ( gcc48 )
    -------------------------------

    ./port test gcc48 gcc48-test-options=check-target-libstdc++-v3
    ./port test gcc48 gcc48-test-options=check-target-libitm          
    ./port test gcc48 gcc48-test-options=check-target-libgomp
    ./port test gcc48 gcc48-test-options=check-target-libjava


    4.2 Post Install Tests ( gcc4 )
    ------------------------------

    ./port test gcc4 gcc4-test-options=check-target-libstdc++-v3
    ./port test gcc4 gcc4-test-options=check-target-libitm
    ./port test gcc4 gcc4-test-options=check-target-libgomp
    ./port test gcc4 gcc4-test-options=check-target-libjava

