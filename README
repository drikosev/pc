

Port Center
-----------

The port center (pc) is an OS directory that contains a few Bash Scripts and Make Files, which can help one install open source developer tools on a Mac; formerly OS X, now macOS.

The Port Center automates also the installation of RPM, a package management system which however requires a long list of dependencies to be installed first. The PC script runs on OS X (10.9-10.11) and macOS (10.12-10.13). The newer system macOS Mojave (10.14) isn't supported.

Also, one can run this script in a RHEL 7.4-7.6 compatible system to install two Linux Drivers, one for the Apple USB Super Drive (ausden) and another for the Broadcom IEEE 802.11a/b/g/n WiFi card (bcm43xx) installed on older Mac Computers (ie a Mac Mini 2011). The WiFi Driver is kernel specific and has to be reinstalled after a kernel upgrade.


Installation Script
-------------------

To install a package, one has to run the "port" command to create an archive that will be processed by the system installer. This "port" command cannot uninstall packages and shouldn't be on the path.

The installation process is logically divided in three phases. At first, one can run the command "./port details <package>" to examine in advance the installation details of a package, without download it; this command will print the relevant url's, configuration options, and installation paths for that package.

After, one can archive a package with a single command or on a step-by-step basis. Specifically, one can download, extract, patch, configure, make, place, pack, and archive a package. These steps are also options of the port command. Running the "port" command with the option "place" will install files to a temporary directory located at "/tmp/<package>.dst"; which is the destination root that will be packed and archived.

Finally, one can invoke the system installer to process the archive; possibly, by double clicking it. If you build and install a package on the same machine you can simply run: "./port install <package>". 

Once the RPM has been installed, one can use in the port script the command line arguments "rpmbuild" and "rpminstall" instead of "archive" and "install" respectively for any open source package. To see more type: "~/pc/port --help"


Download & Setup
----------------

Once the tarball has been downloaded (ie at ~/Downloads/pc-rules-2019-10-27.tar.bz2), the following four commands will setup the port center:

install -d ~/pc 
cd ~/pc 
tar -xjSf ~/Downloads/pc-rules-2019-10-27.tar.bz2 
ln -sf rules/port port


*SHA1 pc-rules-2019-03-01.tar.bz2: c662e17df0eed614fa81f85f6d805689ebb09a3a
*SHA1 pc-rules-2019-03-02.tar.bz2: 293156d3e03802ddc88b1a408d5e64dd451edfd6
*SHA1 pc-rules-2019-03-04.tar.bz2: 3de3b12611a148a3a19a6c7dfde96e92dfae5ce6
*SHA1 pc-rules-2019-03-05.tar.bz2: da83344dab64f89f256af383459f839be01eea6e
*SHA1 pc-rules-2019-03-08.tar.bz2: 49eaf4c2cfff1d17e08ab695cfbe8ead7b2bca9a
*SHA1 pc-rules-2019-03-09.tar.bz2: c3bbb22abcde98574ac495f5d907e6e9e5df8d4a
*SHA1 pc-rules-2019-03-10.tar.bz2: 6cffb43603a4adf62e984f4de9190d331251e4aa
*SHA1 pc-rules-2019-03-11.tar.bz2: 55b6adff6e5e0dc39c9025ba0c962fd9fb06faaf
*SHA1 pc-rules-2019-03-17.tar.bz2: 81dd65f57648ecac6ca4566f325c7daabfdd3db1
*SHA1 pc-rules-2019-03-18.tar.bz2: 0b9913752b07c5753a91b111c05bc5f803d0cada 
*SHA1 pc-rules-2019-03-19.tar.bz2: 85b58544f46da40e933d5d887d5af4aa6bbbe5df
*SHA1 pc-rules-2019-03-20.tar.bz2: 8fdb3bb3c691708d5d1fdaa1460b4e088500971d
*SHA1 pc-rules-2019-03-23.tar.bz2: 4290498b9d5e3d8e98f9cdbfe074303effc7abca
*SHA1 pc-rules-2019-03-25.tar.bz2: 79423fb76e46a99caf6b6abb525abffbf826c704
*SHA1 pc-rules-2019-09-20.tar.bz2: 539cf8ec33460c8d2fa9b4881b6549f662d355f8 
*SHA1 pc-rules-2019-09-29.tar.bz2: e6ff86a18d0e8c1beb61308f22f69820e8517f9c
*SHA1 pc-rules-2019-10-04.tar.bz2: 471600892cee9c2ccb0823b68123c10d38857463
*SHA1 pc-rules-2019-10-22.tar.bz2: b4c5a02efe500ceab1890fd65028addf3ca146e3
*SHA1 pc-rules-2019-10-24.tar.bz2: fd746daadb4abf0803c3a036acc3817a19d78b9a
*SHA1 pc-rules-2019-10-25.tar.bz2: 98aa4430ac3e20b5c3b3364a7906887432ba7ace
*SHA1 pc-rules-2019-10-26.tar.bz2: de7e287fbfad6604f30661f1e92828f654035011
*SHA1 pc-rules-2019-10-27.tar.bz2: edc0aea9a18ccaaf3a3e6645473a099590064b05

Note: the PR/62044 has introduced a regression and these 7 tarballs have broken Fortran OMP functionality.

*SHA1 pc-rules-2019-10-28.tar.bz2: 29eb16713c9568ca5abf43b01310e38b4f1234cc [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-10-29.tar.bz2: aa9d9abe482d2d6e739ec98e7dab6076575095cf [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-10-30.tar.bz2: 9a9d7a7ba19d502d1c44ee53872d0d3efd076630 [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-10-31.tar.bz2: 329bbf014e91b0e4d28688b112f5996f6be35411 [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-11-01.tar.bz2: c85f812608c39119e3b7033cd4e7a5d6a65e661c [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-11-02.tar.bz2: c6a7db35ff970447c7ac1278f408f17e28ab9fdd [broken libgomp in gcc-4.8.5]
*SHA1 pc-rules-2019-11-04.tar.bz2: 9b1a9d2466244da7e115de0c2839d49bb12f9638 [broken libgomp in gcc-4.8.5]

To see ie the build instructions for gcc-4.8, type:

./port details gcc4

Likely, this is the first package to be installed on MacOS (10.13) and a night build is recommended. The file "selective-gcc-tests.txt" explains some build options about this package.



RPM (4.11.3)
------------

[2017-11-13]
The RPM Package Manager (RPM) is a command line driven package management system used in various Linux distributions, such as Red Hat Enterprise Linux, and SUSE Linux Enterprise. According to wikipedia, it has also been ported to other systems such as IBM's AIX .

This package builds the fork distributed by rpm.org and now uses gnupg-2.0. This porting is still work in progress and hasn't passed yet adequate quality tests. In example, we haven't tested at all the RPM Plug-In functionality. If you face any problems with the Berkeley DataBase, configure it with the minimum options possible.

To install this package and initialise the RPM DataBase, run:

./port install rpm

If the above command fail, follow a step by step approach. Post a clean command, configure again, and then install:

./port clean rpm
./port -v configure rpm
./port install rpm

If everything works as supposed to, a "postinstall" script will also initialize the RPM DataBase and populate it with all the packages installed by the Port Center along with any other JRE and JDK installed in your system. If not restricted by the SandBox it will attempt to process XQuartz also, if installed. These packages will go under the full control of RPM, you can uninstall them.

The "postinstall" script will also run the "vpkg-provides.sh" script that creates a virtual package for all the libraries installed at /usr/lib. Further, all Frameworks in System Library are added as capabilities that the system provides.

If everything has indeed worked as supposed to, you should be able to install easily at least a small RPM package, ie gnu sed.

Below there are step by step instructions to help you download this small RPM package (sed-4.2.2-5) from public-yum.oracle.com and install it on an Mac OS Sierra (10.13).


Download a source RPM Package
-----------------------------

cd ~/Downloads
curl -O https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackageSource/sed-4.2.2-5.el7.src.rpm
rpm -i sed-4.2.2-5.el7.src.rpm 
 

The above command is not supposed to complain at all about signature problems, but you will likely see and it is safe to ignore the following two recurring warnings.

warning: user mockbuild does not exist - using root 
warning: group mockbuild does not exist - using root 
 

In case you see a warning about the signature, run:
sudo rpm --import /usr/local/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle-ol7


Porting a source RPM package to Mac OS High Sierra (10.13)
----------------------------------------------------------
cd $HOME/rpmbuild 
sed -i.sav "s/, [ ]*libselinux-devel//g" SPECS/sed.spec 
sed -i.sav "s,/sbin/install-info,/usr/local/bin/install-info,g" SPECS/sed.spec 
sed -i.sav "s/configure[ ]*--without-included-regex/configure --disable-nls --disable-i18n --with-included-regex/g" SPECS/sed.spec 
sed -i.sav "s/sed.info.gz/sed.info/g" SPECS/sed.spec
sed -i.sav "s/%find_lang/#%find_lang/g" SPECS/sed.spec
sed -i.sav "s/\-f[ ]*%{name}.lang//g" SPECS/sed.spec  
rm -f SPECS/sed.spec.sav


Build & Install an RPM Package
------------------------------
cd $HOME/rpmbuild 
rpmbuild -ba SPECS/sed.spec --target x86_64 
sudo rpm -i RPMS/X86_64/sed-4.2.2-5.x86_64.rpm


Uninstall an RPM Package
------------------------
Thereafter, one should be able to uninstall this package, which hasn't any active dependents, with the following command:

sudo rpm --erase sed-4.2.2-5

Since various RPM Scripts depend on gnu sed, one will definitely reinstall it. If "autogen" is also installed one can make a complete check on gcc (make check), because the gcc sub-package "fixincludes" depends on both of them.


Epilogue
--------
Obviously, one can copy paste and execute the above commands in a Mac, as long as Oracle Linux version 7.6 uses this version of sed. Without any doubt, the RPM installation still needs fine tuning (no mock, rpmlint, and so on) and probably this package isn't representative of the effort needed to port a package to OS X. Many RPM Source Packages require actual patch files to build on a Mac. Once "gnu sed" is installed, one should be able to install without any modifications "byacc", a prerequisite of "gnu awk", which in turn requires some path adjustments, ie /sbin and /usr/bin to /usr/local/bin.


Known Issues
------------
[2018-04-24]

- The installation script should run immediately after you clean install macOS High Sierra
  along with the Command Line Tools and optionally Xcode. Any other packages on path, ie at 
  "/opt/local", might have undesirable side effects; a similar restriction applies to Linux 
  as well. This is the only scenario I've successfully tested so far. 

- If you rebuild & install an RPM package, check that the following two lines show up:
  "packing     ... <pkg>.rpm" 
  "installing  ... <pkg>.rpm"
  If you don't see both lines, then an older RPM is installed (requires manual deletion). 

- To install gcc48 or gcc4 on Linux, you have to manually install its dependencies. The 
  required dependencies in a RHEL 7.6 system can be satisfied by the official distribution
  packages. So, the PC won't attempt to install ie gettext or pkg-config.

  Although the PlugIn facilitates debugging for Fortran programs with LLDB, one should expect
  that it has bugs (PR/82995 uncovers a F2008 tricky bug). Yet, it can overcome few problems
  mainly on a Mac, like ie the test failure of pr49866.c (PLTOFF isn't acceptable by newer mac
  linkers). On Linux, the PlugIn can compile ie the Fortran program found in PR/82065.
  
  There are some failures with the "guality" tests on Linux (gcc.dg/quality/) whereas on a
  Mac the PCH tests have been adjusted to run without warnings & core dumps. One of
  the warnings ie didn't comply with a system security policy that loads processes at 
  randomly chosen memory addresses; I could avoid it only in the Xcode environment.

  The PCH test "largefile.c" might fail in the gcc48 tests on OS X Yosemite (10.10). An 
  extra patch for the PR/14940 has repeatedly bypassed those random failures several times,
  success isn't guaranteed though. One can apply manually the patch "gcc48-pr14940.newer"   
  to reverse the two related patches (but use then an 1 GB array for the PCH area).

  The package gcc4 cannot fully recompile all the java classes of gcj and thus this option
  has been deactivated; haven't figured out why, perhaps when java version > 1.7 ?

  One test failure in "libjava" is Darwin specific (ie from 10.9 to 10.13); see the PR/48097.
  In this case, one can still create java classes (byte-codes) that run as supposed to.

  Since 2017-11-20, gcc-4.8.5 has experimental support for Fortran SubModules. An implementation
  internal issue is that the submodule separator '@' has been replaced by '$' as three test cases
  (7, 8, and 29) were failing due to assembly errors in both Linux and with the PlugIn.  

  The backport of PRs 63230 & 70397 is dubious. Whereas, the test case "unlimited_polymorphic_26"
  has random failures on Linux, which simply means that the backport isn't perfect.

  Note: SubModules and Deferred Length Characters aren't officially implemented in GNU Fortran
  version "4.8" and there are various newer PRs filed in GCC Bugzilla around these features. 

- A long standing problem of GNU GCC in macOS had been that the destructors of local thread
  objects were running on deallocated memory (Emulated TLS). To my understanding, this issue
  has been solved for the newer Darwin systems with the solution applied to PR/78968. I have
  back-ported this patch to version 4.8 (a patch is applied for the PR/58142 if OS X < 10.9).

- Too many test cases of Valgrind (3.13) fail on a mac 10.12, ie 73 of the 215 "memcheck" tests
  fail. Whereas the ratio of the failures is worse when one runs all the tests: 
  https://bugs.kde.org/show_bug.cgi?id=365327#c23

  The PC script can install Valgrind-3.14 on OS X 10.11 and macOS 10.12-10.13.

- If bash is asked to run a non existing command, you might face an unimportant Segmentation 
  Fault. This problem, which appeared in Sierra, remains even with the newer patches applied
  on 2017-10-02. Perhaps, some Linux specific patches should be skipped on Darwin. I haven't
  seen this error in High Sierra (10.13.4).

  To set this bash shell as the user default, one has to manually run the following command: 
  sudo dscl . create /Users/${LOGNAME} UserShell /usr/local/bin/bash

- The GNU tar-1.26 command (tar) might complain for unknown "header keywords" if the pc 
  "tarball" has been compressed by the BSD tar command (bsdtar). I always ignore those messages.

- The installation script seems to be ready for macOS High Sierra (10.13) but it has not been 
  tested very well. On 2017-11-13 I've installed gcc (4.8.5 & 7.1), autogen, RPM, and CVS. Once
  I've installed 10.13.4 along with CLT's for Xcode 9.3, I no longer see a bash problem but the
  gcc4 tests have 2 more failures.

  One of these two new failures is likely related to the file "include-fixed/stdio.h", which is
  also found in gcc 7.3 as well.  
  
  - /usr/local/lib/gcc/x86_64-apple-darwin17/4.8.5/include-fixed/stdio.h
  - /opt/local/lib/gcc/x86_64-apple-darwin17/7.3.0/include-fixed/stdio.h

  One can run the following command in the build directory to reproduce the first new failure:

  make check-gcc-c RUNTESTFLAGS="cpp.exp=isysroot-1.c -v"

  As an interim solution, the patch "gcc48-fixinc2" makes sure the problematic include file is 
  deleted. Note that this patch makes the cleaning only when we run "make check-fixincludes",
  not if you run "make stmp-fixinc". Once we have the official solution, this patch will be 
  discarded.

  The second new failure can be reproduced with the following command:

  make check-gcc-c++ RUNTESTFLAGS="dg.exp=darwin-cfstring1.C"

  The applied patch has been proposed at: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83531


- The latest versions of GNU GCC (7.3 & 8.2) are installed at /opt/local instead of /usr/local. The  
  installation script creates some soft links (ie /opt/local/bin/gcc -> /opt/local/bin/gcc8) without
  examining if an existing link points to a newer version. Regarding GCC 8.2, I've installed it only
  on RHEL (7.6) and macOS (10.13). 


  [ The Port Center (pc) was originally hosted at http://users.otenet.gr/~drikosev/ ]
