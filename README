

Port Center
-----------

The port center (pc) is an OS directory that contains a few Bash Scripts and Make Files,
which can help one install open source developer tools on a Mac; formerly OS X, now macOS.

The Port Center automates also the installation of RPM, a package management system which
however requires a long list of dependencies to be installed first. The PC script runs on
OS X (10.9-10.11) and macOS (10.12-10.14). Yet, support for Mojave is work in progress.

Also, one can run this script in a RHEL 7.4-7.6 compatible system to install two Linux
Drivers, one for the Apple USB Super Drive (ausden) and another for the Broadcom IEEE
802.11a/b/g/n WiFi card (bcm43xx) installed on older Mac Computers (ie a Mac Mini 2011).
The WiFi Driver is kernel specific and has to be reinstalled after a kernel upgrade.


Installation Script
-------------------

To install a package, one has to run the "port" command to create an archive that will be
processed by the system installer. This "port" command cannot uninstall packages and
shouldn't be on path.

The installation process is logically divided in three phases. At first, one can run the
command "./port details <package>" to examine in advance the installation details of a
package, without download it; this command will print the relevant url's, configuration
options, and installation paths for that package.

After, one can archive a package with a single command or on a step-by-step basis.
Specifically, one can download, extract, patch, configure, make, place, pack, and archive
a package. These steps are also options of the port command. Running the "port" command
with the option "place" will install files to a temporary directory located at
"/tmp/<package>.dst"; which is the destination root that will be packed and archived.

Finally, one can invoke the system installer to process the archive; possibly, by double
clicking it. If you build and install a package on the same machine you can simply run:
"./port install <package>". 

Once the RPM has been installed, one can use in the port script the command line arguments
"rpmbuild" and "rpminstall" instead of "archive" and "install" respectively for any open
source package. To see more type: "~/pc/port --help"


Download & Setup
----------------

Once the tarball has been downloaded (ie at ~/Downloads/pc-rules-2021-02-14.tar.bz2), the
following four commands will setup the port center:

install -d ~/pc 
cd ~/pc 
tar -xjSf ~/Downloads/pc-rules-2021-02-14.tar.bz2 
ln -sf rules/port port

*SHA1 pc-rules-2019-11-13.tar.bz2: 7d05037304677ccf65e6a58b794416f088800881
*SHA1 pc-rules-2019-12-06.tar.bz2: 29f65de5e10cf0dbb8152a8f9812482d3d2b5199
*SHA1 pc-rules-2020-04-04.tar.bz2: 7bf09f61eb34834e7d8d9b826961eb9b03dea798
*SHA1 pc-rules-2020-05-11.tar.bz2: 63e81b8e393276dcf569ec0ff35a7dfb87f018e3
*SHA1 pc-rules-2020-05-17.tar.bz2: 9a6970b52c767fec19242324c3f5a825592dfa5a
*SHA1 pc-rules-2020-05-26.tar.bz2: d7c5657937617ef8e02fab667ed84ee02615b6a8
*SHA1 pc-rules-2020-06-10.tar.bz2: cddf3c3b85bc0c72e4b1d6ffa2d54bf861011862
*SHA1 pc-rules-2020-10-14.tar.bz2: 9b3db6f6c420b0d857e8d8a72114055ab19b7f6f
*SHA1 pc-rules-2020-12-06.tar.bz2: 47f1a22e7727349dc821b2198cec9cfa2185d4c6
*SHA1 pc-rules-2020-12-25.tar.bz2: ee2f1c95d857ca9dd02a615c2890c5460b24e5c7
*SHA1 pc-rules-2021-01-17.tar.bz2: 913126eff0226e8c21ba7bf8f8dbd73143842efc
*SHA1 pc-rules-2021-02-14.tar.bz2: 695b970549745f774f9330f61b4b0fca2b93eb1f

To see ie the build instructions for gcc-4.8.5, type:

./port details gcc4

Likely, this is the first package to be installed on MacOS (10.14) and a night build is
recommended. The file "selective-gcc-tests.txt" explains some build options about this
package. On macOS Mojave (10.14) the SDK Headers are required, see the known issues below.



RPM (4.11.3)
------------

[2017-11-13]
The RPM Package Manager (RPM) is a command line driven package management system used in
various Linux distributions, such as Red Hat Enterprise Linux, and SUSE Linux Enterprise.
According to wikipedia, it has also been ported to other systems such as IBM's AIX .

This package builds the fork distributed by rpm.org and now uses gnupg-2.0. This porting
is still work in progress and hasn't passed yet adequate quality tests. In example, we
haven't tested at all the RPM Plug-In functionality. If you face any problems with the
Berkeley DataBase, configure it with the minimum options possible.

To install this package and initialise the RPM DataBase, run:

./port install rpm

If the above command fail, follow a step by step approach as you may have to do with any
other package that fails, ie "autogen" on Mojave. Post a clean/cleaner command, configure
again, and then install:

./port clean rpm
./port -v configure rpm
./port install rpm

If everything works as supposed to, a "postinstall" script will also initialize the RPM
DataBase and populate it with all the packages installed by the Port Center along with any
other JRE and JDK installed in your system. If not restricted by the SandBox it will
attempt to process XQuartz also, if installed. These packages will go under the full
control of RPM, you can uninstall them.

The "postinstall" script will also run the "vpkg-provides.sh" script that creates a
virtual package for all the libraries installed at /usr/lib. Further, all Frameworks in
System Library are added as capabilities that the system provides.

If everything has indeed worked as supposed to, you should be able to install easily at
least a small RPM package, ie gnu sed.

Below there are step by step instructions to help you download this small RPM package
(sed-4.2.2-5) from public-yum.oracle.com and install it on an Mac OS Mojave (10.14).


Download a source RPM Package
-----------------------------

cd ~/Downloads
curl -O https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackageSource/sed-4.2.2-5.el7.src.rpm
rpm -i sed-4.2.2-5.el7.src.rpm 
 

The above command is not supposed to complain at all about signature problems, but you
will likely see and it is safe to ignore the following two recurring warnings.

warning: user mockbuild does not exist - using root 
warning: group mockbuild does not exist - using root 
 

In case you see a warning about the signature, run:
sudo rpm --import /usr/local/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle-ol7


Porting a source RPM package to Mac OS Mojave (10.14)
-----------------------------------------------------
cd $HOME/rpmbuild 
sed -i.sav "s/, [ ]*libselinux-devel//g" SPECS/sed.spec 
sed -i.sav "s,/sbin/install-info,/usr/local/bin/install-info,g" SPECS/sed.spec 
sed -i.sav "s/configure[ ]*--without-included-regex/configure --disable-nls \
    --disable-i18n --with-included-regex/g" SPECS/sed.spec 
sed -i.sav "s/sed.info.gz/sed.info/g" SPECS/sed.spec
sed -i.sav "s/%find_lang/#%find_lang/g" SPECS/sed.spec
sed -i.sav "s/\-f[ ]*%{name}.lang//g" SPECS/sed.spec  
rm -f SPECS/sed.spec.sav


Build & Install an RPM Package
------------------------------
cd $HOME/rpmbuild 
rpmbuild -ba SPECS/sed.spec --target x86_64 
sudo rpm --force --nodeps -i RPMS/X86_64/sed-4.2.2-5.x86_64.rpm


Uninstall an RPM Package
------------------------
Thereafter, one should be able to uninstall this package, which hasn't any active
dependents, with the following command:

sudo rpm --erase sed-4.2.2-5

Since various RPM Scripts depend on gnu sed, you should better reinstall it. If "autogen"
is also installed one can make a complete check on gcc (make check), because the GCC
sub-package "fixincludes" depends on both of them. 


Epilogue
--------
Obviously, one can copy paste and execute the above commands in a Mac, as long as Oracle
Linux version 7.6 uses this version of sed. Without any doubt, the RPM installation still
needs fine tuning (no mock, rpmlint, and so on) and probably this package isn't
representative of the effort needed to port a package to OS X. Many RPM Source Packages
require actual patch files to build on a Mac. Once "gnu sed" is installed, one should be
able to install without any modifications "byacc", a prerequisite of "gnu awk", which in
turn requires some path adjustments, ie /sbin and /usr/bin to /usr/local/bin.


Known Issues
------------
[2019-11-26]

- The installation script should run immediately after you clean install macOS Mojave
  along with the Command Line Tools and optionally Xcode. Any other packages on path, ie
  at "/opt/local", might have undesirable side effects; a similar restriction applies to
  Linux as well. This is the only scenario I've successfully tested so far. On Mojave run:

  open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg 

- If you rebuild & install an RPM package, check that the following two lines show up:
  "packing     ... <pkg>.rpm" 
  "installing  ... <pkg>.rpm"
  If you don't see both lines, then an older RPM is installed (requires manual deletion). 

- To install gcc48 or gcc4 on Linux, you have to manually install its dependencies. The
  required dependencies in a RHEL 7.6 system can be satisfied by the official distribution
  packages. So, the PC won't attempt to install ie gettext or pkg-config.

  Although the PlugIn facilitates debugging for Fortran programs with LLDB, one should
  expect that it has bugs. Yet, it can overcome few problems, mainly on a Mac, like ie the
  test failure of pr49866.c (PLTOFF isn't acceptable by mac linkers). On Linux, the PlugIn
  can compile and run ie the Fortran programs found in PRs 82065 and 87659. On May 3, 2020 
  however I couldn't use the PlugIn to build the (static) LAPACK library. 
  
  There are some failures with the "guality" tests on Linux (gcc.dg/quality/) whereas on a
  Mac the PCH tests have been adjusted to run without warnings & core dumps. One of
  the warnings ie didn't comply with a system security policy that loads processes at 
  randomly chosen memory addresses; I could avoid it only in the Xcode environment.

  The PCH test "largefile.c" might fail in the gcc48 tests on OS X Yosemite (10.10). An 
  extra patch for the PR/14940 has repeatedly bypassed those random failures several times
  success isn't guaranteed though. One can apply manually the patch "gcc48-pr14940.newer"
  to reverse the two related patches (but use then an 1 GB array for the PCH area).

  On Mojave, five tests have been adjusted to run with the option "-fprofile-generate",
  instead of the unsupported option "-pg". Further, during the build you can safely ignore 
  any popup that may show up to inform you that the architecture i386 is deprecated.

  The package gcc4 cannot fully recompile all the java classes of gcj and thus this option
  has been deactivated; haven't figured out why, perhaps when java version > 1.7 ?

  One test failure in "libjava" is Darwin specific (ie from 10.9 to 10.14); see PR/48097.
  In this case, one can still create java classes (byte-codes) that run as supposed to.


  Since 2017-11-20, gcc-4.8.5 has experimental support for Fortran SubModules. An 
  internal issue is that the submodule separator '@' has been replaced by '$' as three
  test cases (7, 8, and 29) were failing due to assembly errors in both Linux and with the
  PlugIn.  

  Since 2020-04-29, gcc-4.8.5 has experimental support for Allocation of Arrays without
  space specification.

  Note: SubModules, Deferred Length Characters, Finalization, and Allocation of Arrays
  without space specification aren't officially implemented in GNU Fortran version "4.8"
  and there are various newer PRs filed in GCC Bugzilla around these features. More
  detailed information about the supported features per version can be found at
  https://gcc.gnu.org/wiki/Fortran2003Status 

  Note: You can bypass/trick several finalization seg. faults with the optimization option 
  -O2 or -O3, ie the ones in PRs 69298, 70863, 82996, and 96122 (2020-12-18). 

- A long standing problem of GNU GCC in macOS had been that the destructors of local
  thread objects were running on deallocated memory (Emulated TLS). To my understanding,
  this issue has been solved for the newer Darwin systems with the solution applied to 
  PR/78968. I've back-ported this patch to version 4.8 (another patch is applied for the
  PR/58142 if OS X < 10.9).

- The PR/78534 changes the type of character length fields from int (4 bytes) to size_t.
  The latter can be either 4 bytes on 32bit systems or 8 bytes in 64bit systems. Which can
  possibly affect Fortran/C interoperability projects that don't use BIND(C) attributes. 

  This patch has been backported in a manner that let's you optionally change the type. By
  default the older GNU Fortran API is preserved (LONG_CHARLEN=0). To change this value in
  an already configured compiler apply the patch "gcc48-pr78534.longer". To configure a
  a fresh compiler with size_t, simply run: "./port configure gcc4  LONG_CHARLEN=1".
    
  Note that this back-port can change the API but not the actual limit of a string length.

- It turns out that class arrays in gfortran are broken as mentioned in PR/92065 due to 
  PR/60322, which I unfortunately ported to gcc-4.8 in November 2019. See comment 18: 
  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92065#c18 

  To remedy the situation I've applied a hack on the 2020-12-25 tarball and thereafter 
  that is nothing more than an interim solution, as outlined in PR/92065, comment 23. 
  That explained, I don't see regressions, and once aware I couldn't tolerate such a 
  bug until we've the perfect solution committed to GNU GCC Bugzilla. 

  Latest tarball before PR/60322 may be the pc-rules-2019-11-13.tar.bz2, commit details:
  https://github.com/drikosev/pc/commit/e02c47f1918f33bde18ddee57bd907b815df97ea 

  Note: This hack is applied also to 7.4 - 7.5 and 8.2 - 8.4 (8.3 is untested though).

- It turns out that the function Random Init (2018) isn't standard confirming. See ie:
  https://groups.google.com/g/comp.lang.fortran/c/Z0TKn4q6UgQ

- My own patch for PR/64290 has been applied without passing strict testing. Specifically,
  modern Fortran has introduced a likely unique concept of ALLOCATABLE entities. At least 
  I'm not aware of such functionality in languages like C/C++, Java, and ABAP. The promise 
  is similar to that of the garbage collector in Java. The runtime automatically frees the 
  dynamically allocated memory in such entities (maybe oversimplified).
 
  One known issue with such allocatable entities is that any pointers to them may become 
  undefined when the runtime makes a reallocation on assignment. To my surprise also, a 
  constructor may be finalized, as ie a function result may have to be finalized. Further,
  the standard doesn't explain in much detail the behaviour of such entities. 
 
  This patch however affects only class re-allocations on intrinsic assignments, if either 
  the LHS or the RHS is polymorphic and none of them is an array, which is implemented in
 'trans_class_assignment' and I've received very limited feedback for just two test cases:
  https://gist.github.com/drikosev/a9e9e8357dbc45aeb02773198069222b

  The implementation of finalizers in gfortran remains partial (2021-01-17).

- The patch for PR/44504 is a personal effort for a nice to have feature in gfortran that
  sets the optional STAT argument in Fortran DEALLOCATE statements for undefined pointers.

  So far, I've not received though any feedback at all for a multithreading related issue: 
  - https://groups.google.com/g/comp.lang.fortran/c/ntoCosjDwb0
  - stackoverflow.com/questions/65973285/after-a-call-to-setjmp-can-pthread-t-be-different

  As a result, this workaround is restricted to run as long as no race conditions are
  detected due to multithreading, ie by OpenMP statements. This work may be abandoned as a
  somewhat risky patch, which however is also ie an interim solution for PR/93691 as well,
  or for PRs 98433, 97123, and 52774. The relevant error message is fully suppressed with
  the option 'MallocDebugReport=none' in Mojave and 'MALLOC_CHECK_=2' in CentOS-7.6, ie:
           $ gfc -g pr97123-00.f90 && MallocDebugReport=none ./a.out   
           $

  Note: the example in PR/93691 behaves differently in macOS and Linux and the DEALLOCATE
        statement needs the STAT argument, or I pass the wrong value to 'MALLOC_CHECK_'.

  To avoid this patch, one may choose the previous tarball (2020-12-25 tarball).


- The bug fix for PR/88735 is also a personal, unofficial effort that is partial. Although
  the symptom is the finalization of the RHS and I can't reproduce the bug without a final
  routine, the real problem seemed to be that gfortran makes a normal assignment even for
  fields with a defined assignment operator. So, this bug fix copies recursively all the
  fields of a structure from RHS to LHS except those having a defined assignment operator.

  The common denominator (κοινός παρονομαστής) with the PR/64290 seems to be some design
  error in the assignment implementation for derived type variables that may cause a real
  headache to GNU Fortran maintainers, unless they skip it. That explained, my bug fix is
  obviously partial and perhaps solves a problem the wrong way, but I saw just few issues.

  Note: When I test the patch without a finalizer or assignment operator as prerequisites,
        no warning is issued in 'pr25923.f90'. Also, this patch doesn't accept a function
        as the RHS, as it would run smoothly only in few cases, ie the 'proc_ptr_48.f90'.
        Not sure why this happens but it's one reason that this patch is partial. Another
        reason is that it fully copies arrays of derived type objects as the assignment 
        defined operator is ignored. Which is also ignored if the variables A and B in the   
        first program of PR/88735 were declared as classes (also not sure if this is ok).

  Note: A test case with deep nested structures containing arrays of structures is a must.

- Too many test cases of Valgrind (3.13) fail on a mac 10.12, ie 73 of the 215 "memcheck"
  tests fail. Whereas the ratio of the failures is worse when one runs all the tests:
  https://bugs.kde.org/show_bug.cgi?id=365327#c23

  The PC script can install Valgrind-3.15 on OS X 10.11 and macOS 10.12-10.14. Support on
  Mojave though is experimental and the installed program needs additional fine tuning.


- If bash is asked to run a non existing command, you may face an unimportant Segmentation
  Fault. This problem which appeared in Sierra remains even with the newer patches applied
  on 2017-10-02. Perhaps, some Linux specific patches should be skipped on Darwin. I have 
  not seen this error thereafter in High Sierra (10.13.4).

  To set this bash shell as the user default, one has to manually run this command: 
  sudo dscl . create /Users/${LOGNAME} UserShell /usr/local/bin/bash

- The GNU tar-1.26 command (tar) might complain for unknown "header keywords" if the pc
  "tarball" has been compressed by the BSD tar command (bsdtar). I ignore these messages.

  As an interim solution, the PC script can install GNU tar-1.29 on macOS (10.11-10.14).

- The installation script seems to be ready for macOS Mojave (10.14) but it has not
  been tested very well. On 2019-11-30 I've installed gcc (4.8.5 & 7.5), RPM and autogen.
  
  Below are mentioned two failures I'd faced on 10.13.4. The first of these two failures
  is likely related to the file "include-fixed/stdio.h", which is also found in gcc 7.5:
  
  - /usr/local/lib/gcc/x86_64-apple-darwin18/4.8.5/include-fixed/stdio.h
  - /opt/local/lib/gcc/x86_64-apple-darwin18/7.5.0/include-fixed/stdio.h

  One can run the following command in the build directory to reproduce the first failure:

  make check-gcc-c RUNTESTFLAGS="cpp.exp=isysroot-1.c -v"

  As an interim solution, the patch "gcc48-fixinc2" makes sure the problematic include
  file is deleted, which happens only when we run "make check-fixincludes", not if you run 
  "make stmp-fixinc". Once we have the official solution, this patch will be discarded.

  If you can't place gcc4 to /tmp/gcc.dst, delete this header file from the PC directory: 
  rm -rf gcc4/gcc-4.8.5-build/gcc/include-fixed/stdio.h

  The second failure can be reproduced with the following command:

  make check-gcc-c++ RUNTESTFLAGS="dg.exp=darwin-cfstring1.C"

  The applied patch is proposed at: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83531


- Newer versions of GNU GCC (7.5 & 8.4) are installed at /opt/local instead of /usr/local.
  The PC script creates some soft links (ie /opt/local/bin/gcc -> /opt/local/bin/gcc8)
  without examining if an existing link points to a newer version.

- Note that the Apple JRE is deprecated and some GUI classes have issues after Sierra. In
  specific several text components aren't functional and possibly there are more problems.
  In example, I can't edit BNF Grammars in Syntaxis with the Apple JRE on 10.13 & 10.14.
  Yet, I could fully rebuild parsers/scanners on a fresh installed Mojave and the JAR file
  built by the Apple JDK was fully functional on both Windows-8.1 & RedHat-9 (kernel 2.4).

- You may fail to install Whizard-2.8.2 on Mojave (10.14) due to the following error msg:

   dyld: Symbol not found: __ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE  

  The above seems to be some recurring problem, it's reported ie also in 2015 and 2017:

    https://groups.google.com/forum/#!topic/fastsimcoal/09fmDduSEEg
    http://mailman.ucar.edu/pipermail/ncl-install/2017-January/002194.html

  So far, I haven't figured out what exactly caused this problem or when introduced. The
  last time I could successfully build the project was likely in December 2019 on a fresh
  installed system (Mojave Installer 10.14.6 - summer 2019). On a MacMini (2011), isolated
  from the Internet, the installation yesterday run smoothly on 10.11-10.13 & CentOS-7.6.

  If you face the above error, then as an interim solution you could try these 2 commands:
    ./port clean    whizard
    ./port install  whizard  whizard-compiler=gcc4 
 
  Although, this problem is fixed since Apr 4, 2020 the proper solution is a clean system.

- If we build & run the following LAPACK test with gfortran we'll likely find differences:
  https://github.com/numericalalgorithmsgroup/LAPACK_Examples

  In two cases (zggev_example.x & zggev3_example.x) we find 1-2 differences with negative
  zeros. Whereas, in another case (zggevx_example.x) there are some numeric differences 
  with very small values (exponent < -15).

- Both Firefox and Thunderbird no longer let you turn off updates [2020-05-13]. I've a
  long time to check what Chrome does. 

- You should better upgrade libiconv to 1.16 (./port install libiconv). Since Apr 11, 2020
  this library is patched to provide few dual APIs, useful on Mojave if DYLD_LIBRAY_PATH
  has some values. Otherwise, you may face the error "dyld: Symbol not found: _iconv".

- A recurring problem when one uses the PC script are broken downloading links. If you can
  not download a tarball, then you have to manually download from an alternative site and
  place it in folder ~/Downloads or ~/Downloads/tars.

  In most cases, the PC script lists a mirror site. In any case the tarball must have the
  expected signature or someone has improperly touched the tarball (as they shouldn't).  
  
- Experimental support for Cygwin was added on March 3, 2021 for just two packages. There 
  are some known problems however, see ie https://cmplx.sourceforge.io 

  Shortly after, on Mar 8, a posting appeared in a c.l.f thread exhibiting numeric results
  produced by gfortran that steadily differ in Linux/Cygwin vs Windows/Mac OS:
  https://groups.google.com/g/comp.lang.fortran/c/Wkc4M-FQKdw   


  Also, I've seen in another project that Libtool fails to link some executables. Likely I
  will need some time to figure out if there are many more issues. Usually, I build my own
  Fortran front-end in Cygwin without any important issues. Further the LAPACK test suite
  runs successfully, which includes some tests for single & double precision numbers.

  
 ----------------------------------------------------------------------------------------
 [ The Port Center (pc) was originally hosted at http://users.otenet.gr/~drikosev/ ]
 These pages are accessible until 2021-04-05. So I've compressed them in a zip file above.