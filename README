
Port Center
-----------

The port center (pc) is an OS directory that contains a few Bash Scripts and Make Files, which can help one install open source developer tools on a Mac; formerly OS X, now macOS.

The Port Center automates also the installation of RPM, a package management system which however requires a long list of dependencies to be installed on macOS Sierra (10.12). In the past I'd tested it also in OS X Yosemite (10.10). Once the RPM is installed, one can use in the port script the command line arguments "rpmbuild" and "rpminstall" instead of "archive" and "install" respectively for any open source package. To see more type: "~/pc/port --help"

Also, one can run this script in RHEL or CentOS 7.3 to install two Linux Drivers for Apple Hardware, one for the Apple USB Super Drive (ausden) and a second for the bcm43xx WiFi card installed in older Mac hardware (Mac Mini & Mac Book Pro 2011, 2012).


Installation Script
-------------------

To install a package, one has to run the "port" command to create an archive that will be processed by the system installer. This "port" command cannot uninstall packages and shouldn't be on the path.

The installation process is logically divided in three phases. At first, one can run the command "./port details <package>" to examine in advance the installation details of a package, without download it; this command will print the relevant url's, configuration options, and installation paths for that package.

After, one can archive a package with a single command or on a step-by-step basis. Specifically, one can download, extract, patch, configure, make, place, pack, and archive a package. These steps are also options of the port command. Running the "port" command with the option "place" will install files to a temporary directory located at "/tmp/<package>.dst"; this is the destination root in Apple's parlance that will be packed and archived.

Finally, one can invoke the system installer to process the archive; possibly, by double clicking it. If you build and install a package on the same machine you can simply run: "./port install <package>". 

The file pc2gfortran.spec provides instructions to help you transfer the Fortran patches to a Source RPM for a Linux installation.


Download & Setup
----------------

Once the tarball has been downloaded (ie at ~/Downloads/pc-rules-2017-09-30.tar.xz), the following four commands will setup the port center:

install -d ~/pc 
cd ~/pc 
tar xf ~/Downloads/pc-rules-2017-09-30.tar.xz 
ln -sf rules/port port

*SHA1  c57502f2b1c76271cbc89e191e65890a4612e391 
To see ie the build instructions for gcc-4.8, type:

./port details gcc4

Likely, this is the first package to be installed on a Mac. On Linux use gcc48 instead. 


RPM (4.11.3)
------------

[2017-04-10]
The RPM Package Manager (RPM) is a command line driven package management system used in various Linux distributions, such as Red Hat Enterprise Linux, and SUSE Linux Enterprise. According to wikipedia, it has also been ported to other systems such as IBM's AIX .

This package builds the fork distributed by rpm.org and now uses gnupg-2.0. This porting is still work in progress and hasn't passed yet adequate quality tests. In example, we haven't tested at all the RPM Plug-In functionality. If you face any problems with the Berkeley DataBase, configure it with the minimum options possible.

To install this package and initialize the RPM DataBase, run:

./port --nosudo install rpm

If everything works as supposed to, a "postinstall" script will also initialize the RPM DataBase and populate it with all the packages installed by the Port Center along with any other JRE and JDK installed in your system. If not restricted by the SandBox it will attempt to process XQuartz also, otherwise one can run it manually on a later phase. These packages will go under the full control of RPM, you can uninstall them.

The "postinstall" script will also run the "vpkg-provides.sh" script that creates a virtual package for all the libraries installed at /usr/lib. Further, all Frameworks in System Library are added as capabilities that the system provides.

If everything has indeed worked as supposed to, you should be able to install easily at least a small RPM package, ie gnu sed.

Below there are step by step instructions to download this small RPM package (sed-4.2.2-5) from public-yum.oracle.com and install it on an Mac OS Sierra (10.12).


Download a source RPM Package

cd ~/Downloads 
curl -O http://public-yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackageSource/sed-4.2.2-5.el7.src.rpm 
rpm -i sed-4.2.2-5.el7.src.rpm 
 

The above command is not supposed to complain at all about signature problems, but you will likely see and it is safe to ignore the following two recurring warnings.

warning: user mockbuild does not exist - using root 
warning: group mockbuild does not exist - using root 
 

In case you see a warning about the signature, run:
sudo rpm --import /usr/local/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle-ol7


Porting a source RPM package to Mac OS Sierra (10.12)

cd $HOME/rpmbuild 
sed -i.sav "s/, [ ]*libselinux-devel//g" SPECS/sed.spec 
sed -i.sav "s,/sbin/install-info,/usr/local/bin/install-info,g" SPECS/sed.spec 
sed -i.sav "s/configure[ ]*--without-included-regex/configure --with-included-regex/g" SPECS/sed.spec 
sed -i.sav "s/sed.info.gz/sed.info/g" SPECS/sed.spec 
rm -f SPECS/sed.spec.sav


Build & Install an RPM Package

cd $HOME/rpmbuild 
rpmbuild -ba SPECS/sed.spec --target x86_64 
sudo rpm -i --nodeps --force RPMS/X86_64/sed-4.2.2-5.x86_64.rpm

Without the option "--nodeps" the above command fails as the library "libintl.8.dylib" is found to be a missing resource. One workaround is to reinstall gettext as a regular rpm package with the following command "~/pc/port --force rpminstall gettext". Obviously, this problem indicates that the conversion of a "*.pkg" to an "*.rpm" is anything else but perfect. 
 

Uninstall an RPM Package

Thereafter, one should be able to uninstall this package, which hasn't active dependents, with the following command:

sudo rpm --erase sed-4.2.2-5

Since various RPM Scripts depend on this package one will definitely reinstall it.


Epilogue

Obviously, one can copy paste and execute the above commands in a Mac, as long as Oracle Linux version 7.3 uses this version of sed. Without any doubt, the RPM installation still needs fine tuning (no mock, rpmlint, and so on) and probably this package isn't representative of the effort needed to port a package to OS X. Many RPM Source Packages require actual patch files to build on a Mac.
Once "gnu sed" is installed, one should be able to install without any modifications "byacc", a prerequisite of "gnu awk", which in turn requires some path adjustments, ie /sbin and /usr/bin to /usr/local/bin.


Known Issues
------------
[2017-09-30]

- The pc script should run immediately after you clean install macOS Sierra along with
  Xcode and the Command Line Tools. Any other packages on path (ie at /opt/local) might
  have undesirable side effects; a similar restriction applies for Linux as well. This 
  is the only scenario I've successfully tested so far. 

- To install gcc48 or gcc4 on Linux, you have to manually install its dependencies. The 
  required dependencies in a RHEL 7.3 system can be satisfied by the official distribution
  packages. So, the PC won't attempt to install ie gettext or pkg-config.

  Although the PlugIn facilitates debugging for Fortran programs in Xcode (which uses only
  the LLDB), I've not tested it exhaustively. Yet, it can overcome few problems mainly on a
  Mac, like ie the test failure of pr49866.c (PLTOFF isn't acceptable by newer mac linkers).
  
  Also, gcc-4.8.5 cannot parse some system headers in macOS Sierra. As a consequence clang
  compiles the packages "gettext" and "pkg-config". There is also a relevant test failure:
  FAIL: gcc.dg/framework-1.c (test for excess errors)

  There are some failures with the "guality" tests on Linux (gcc.dg/quality/) whereas on a
  Mac the PCH tests fail ("pch") because they don't comply with a system security policy 
  that loads processes at randomly chosen memory addresses. Yet, the tests are setup to issue
  warnings on that case. Only in the Xcode environment I could successfully avoid them.

- Too many test cases of "valgrind" fail on a mac, ie 73 of the 215 "memcheck" tests fail.
  Whereas the ratio of the failures is worse when one runs all the tests: 
  https://bugs.kde.org/show_bug.cgi?id=365327#c23

- If bash is asked to run a non existing command, you might face an unimportant Segmentation Fault. 


[ The PC script was originally hosted at http://users.otenet.gr/~drikosev/ ]
